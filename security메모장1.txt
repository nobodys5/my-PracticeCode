security 프로젝트만들고 프로젝트 세팅한뒤에 pagecontroller 생성하여 
getmapping({"/","index"}), (signin),(signup)메소드생성 -> templets에 index.html 생성하여 작성 ->
localhost:8000 요청하여 로그인페이지가 뜨는지 확인 콘솔에 password 복사하여 로그인하여 index.html
(메인페이지)로 들어가지는지 확인 ->yml에서 security 설정값을 (name,password)에맞게 설정해준다.
->securityconfig 클래스생성하여 websecurityconfigureadapter 상속받고 @conpiguration ->
@enablewebsecurity 달고 configure 오버라이딩 메소드 받는다 ->http.주소참조하여 설정값들을 맞춘다
->templets에 auth 패키지에 signin.html,signup.html 생성하여 설정값코드입력하고 mypage.html생성
하여 설정값입력 -> pagecontroller에 mypage 메소드 생성하여 localhost:8000입력하여 설정값대로 실행
되는지 확인한다 ->그리고 signin.html에 가서 설정값들을 sts4에 입력된 설정값에 맞게 재설정한다.
->다시 로컬호스트 입력하여 실행되는지 확인한다. ->principaldetailsService 클래스생성하여 userdtails상속
->메소드 오버라이딩 받는다 -> userdtails를 생성하면 익명클래스가 생성되는데 여기서 권한들을 설정
->getusername,getpassword 에 각각설정값들을 걸어주면 로그인할때 확인하여 설정된다. ->
yml에 있는 security 설정값 추석처리하고 시큐리티컨피그에가서 @bean달고 bcryptpassword 메소드생성
하면 암호화설정이된다 ->프린시펄디테일스에 가서 userdtails 리턴하고 로컬호스트 테스트실행 ->
오류를 던지기 위해 if문을 사용하여 throw new usernamenotfountexception을 사용해준다.->
작성한 오류값을 받아줄 Authfailurhandler 클래스 생성하여 AuthenticationFailurehandler 구현한다. ->
그리고 메소드 오버라이딩 -> 시큐리티컨피그로 가서 controller역할해줄 Authfailuhandler 설정값잡아줌
->다시 어스페일러핸들러로와서 로그인실패창을 띄워줄 코드입력한뒤 테스트해본다.